{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeSocket = exports.LEGAL_TCP_SOCKET_OPTIONS = exports.LEGAL_TLS_SOCKET_OPTIONS = exports.prepareHandshakeDocument = exports.performInitialHandshake = exports.makeConnection = exports.connect = void 0;\nconst net = require(\"net\");\nconst tls = require(\"tls\");\nconst constants_1 = require(\"../constants\");\nconst deps_1 = require(\"../deps\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst auth_provider_1 = require(\"./auth/auth_provider\");\nconst providers_1 = require(\"./auth/providers\");\nconst connection_1 = require(\"./connection\");\nconst constants_2 = require(\"./wire_protocol/constants\");\nasync function connect(options) {\n  let connection = null;\n  try {\n    const socket = await makeSocket(options);\n    connection = makeConnection(options, socket);\n    await performInitialHandshake(connection, options);\n    return connection;\n  } catch (error) {\n    connection?.destroy({\n      force: false\n    });\n    throw error;\n  }\n}\nexports.connect = connect;\nfunction makeConnection(options, socket) {\n  let ConnectionType = options.connectionType ?? connection_1.Connection;\n  if (options.autoEncrypter) {\n    ConnectionType = connection_1.CryptoConnection;\n  }\n  return new ConnectionType(socket, options);\n}\nexports.makeConnection = makeConnection;\nfunction checkSupportedServer(hello, options) {\n  const maxWireVersion = Number(hello.maxWireVersion);\n  const minWireVersion = Number(hello.minWireVersion);\n  const serverVersionHighEnough = !Number.isNaN(maxWireVersion) && maxWireVersion >= constants_2.MIN_SUPPORTED_WIRE_VERSION;\n  const serverVersionLowEnough = !Number.isNaN(minWireVersion) && minWireVersion <= constants_2.MAX_SUPPORTED_WIRE_VERSION;\n  if (serverVersionHighEnough) {\n    if (serverVersionLowEnough) {\n      return null;\n    }\n    const message = `Server at ${options.hostAddress} reports minimum wire version ${JSON.stringify(hello.minWireVersion)}, but this version of the Node.js Driver requires at most ${constants_2.MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MAX_SUPPORTED_SERVER_VERSION})`;\n    return new error_1.MongoCompatibilityError(message);\n  }\n  const message = `Server at ${options.hostAddress} reports maximum wire version ${JSON.stringify(hello.maxWireVersion) ?? 0}, but this version of the Node.js Driver requires at least ${constants_2.MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MIN_SUPPORTED_SERVER_VERSION})`;\n  return new error_1.MongoCompatibilityError(message);\n}\nasync function performInitialHandshake(conn, options) {\n  const credentials = options.credentials;\n  if (credentials) {\n    if (!(credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT) && !options.authProviders.getOrCreateProvider(credentials.mechanism)) {\n      throw new error_1.MongoInvalidArgumentError(`AuthMechanism '${credentials.mechanism}' not supported`);\n    }\n  }\n  const authContext = new auth_provider_1.AuthContext(conn, credentials, options);\n  conn.authContext = authContext;\n  const handshakeDoc = await prepareHandshakeDocument(authContext);\n  // @ts-expect-error: TODO(NODE-5141): The options need to be filtered properly, Connection options differ from Command options\n  const handshakeOptions = {\n    ...options\n  };\n  if (typeof options.connectTimeoutMS === 'number') {\n    // The handshake technically is a monitoring check, so its socket timeout should be connectTimeoutMS\n    handshakeOptions.socketTimeoutMS = options.connectTimeoutMS;\n  }\n  const start = new Date().getTime();\n  const response = await conn.command((0, utils_1.ns)('admin.$cmd'), handshakeDoc, handshakeOptions);\n  if (!('isWritablePrimary' in response)) {\n    // Provide hello-style response document.\n    response.isWritablePrimary = response[constants_1.LEGACY_HELLO_COMMAND];\n  }\n  if (response.helloOk) {\n    conn.helloOk = true;\n  }\n  const supportedServerErr = checkSupportedServer(response, options);\n  if (supportedServerErr) {\n    throw supportedServerErr;\n  }\n  if (options.loadBalanced) {\n    if (!response.serviceId) {\n      throw new error_1.MongoCompatibilityError('Driver attempted to initialize in load balancing mode, ' + 'but the server does not support this mode.');\n    }\n  }\n  // NOTE: This is metadata attached to the connection while porting away from\n  //       handshake being done in the `Server` class. Likely, it should be\n  //       relocated, or at very least restructured.\n  conn.hello = response;\n  conn.lastHelloMS = new Date().getTime() - start;\n  if (!response.arbiterOnly && credentials) {\n    // store the response on auth context\n    authContext.response = response;\n    const resolvedCredentials = credentials.resolveAuthMechanism(response);\n    const provider = options.authProviders.getOrCreateProvider(resolvedCredentials.mechanism);\n    if (!provider) {\n      throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${resolvedCredentials.mechanism} defined.`);\n    }\n    try {\n      await provider.auth(authContext);\n    } catch (error) {\n      if (error instanceof error_1.MongoError) {\n        error.addErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n        if ((0, error_1.needsRetryableWriteLabel)(error, response.maxWireVersion)) {\n          error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n        }\n      }\n      throw error;\n    }\n  }\n  // Connection establishment is socket creation (tcp handshake, tls handshake, MongoDB handshake (saslStart, saslContinue))\n  // Once connection is established, command logging can log events (if enabled)\n  conn.established = true;\n}\nexports.performInitialHandshake = performInitialHandshake;\n/**\n * @internal\n *\n * This function is only exposed for testing purposes.\n */\nasync function prepareHandshakeDocument(authContext) {\n  const options = authContext.options;\n  const compressors = options.compressors ? options.compressors : [];\n  const {\n    serverApi\n  } = authContext.connection;\n  const handshakeDoc = {\n    [serverApi?.version || options.loadBalanced === true ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n    helloOk: true,\n    client: options.metadata,\n    compression: compressors\n  };\n  if (options.loadBalanced === true) {\n    handshakeDoc.loadBalanced = true;\n  }\n  const credentials = authContext.credentials;\n  if (credentials) {\n    if (credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && credentials.username) {\n      handshakeDoc.saslSupportedMechs = `${credentials.source}.${credentials.username}`;\n      const provider = authContext.options.authProviders.getOrCreateProvider(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256);\n      if (!provider) {\n        // This auth mechanism is always present.\n        throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${providers_1.AuthMechanism.MONGODB_SCRAM_SHA256} defined.`);\n      }\n      return provider.prepare(handshakeDoc, authContext);\n    }\n    const provider = authContext.options.authProviders.getOrCreateProvider(credentials.mechanism);\n    if (!provider) {\n      throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${credentials.mechanism} defined.`);\n    }\n    return provider.prepare(handshakeDoc, authContext);\n  }\n  return handshakeDoc;\n}\nexports.prepareHandshakeDocument = prepareHandshakeDocument;\n/** @public */\nexports.LEGAL_TLS_SOCKET_OPTIONS = ['ALPNProtocols', 'ca', 'cert', 'checkServerIdentity', 'ciphers', 'crl', 'ecdhCurve', 'key', 'minDHSize', 'passphrase', 'pfx', 'rejectUnauthorized', 'secureContext', 'secureProtocol', 'servername', 'session'];\n/** @public */\nexports.LEGAL_TCP_SOCKET_OPTIONS = ['family', 'hints', 'localAddress', 'localPort', 'lookup'];\nfunction parseConnectOptions(options) {\n  const hostAddress = options.hostAddress;\n  if (!hostAddress) throw new error_1.MongoInvalidArgumentError('Option \"hostAddress\" is required');\n  const result = {};\n  for (const name of exports.LEGAL_TCP_SOCKET_OPTIONS) {\n    if (options[name] != null) {\n      result[name] = options[name];\n    }\n  }\n  if (typeof hostAddress.socketPath === 'string') {\n    result.path = hostAddress.socketPath;\n    return result;\n  } else if (typeof hostAddress.host === 'string') {\n    result.host = hostAddress.host;\n    result.port = hostAddress.port;\n    return result;\n  } else {\n    // This should never happen since we set up HostAddresses\n    // But if we don't throw here the socket could hang until timeout\n    // TODO(NODE-3483)\n    throw new error_1.MongoRuntimeError(`Unexpected HostAddress ${JSON.stringify(hostAddress)}`);\n  }\n}\nfunction parseSslOptions(options) {\n  const result = parseConnectOptions(options);\n  // Merge in valid SSL options\n  for (const name of exports.LEGAL_TLS_SOCKET_OPTIONS) {\n    if (options[name] != null) {\n      result[name] = options[name];\n    }\n  }\n  if (options.existingSocket) {\n    result.socket = options.existingSocket;\n  }\n  // Set default sni servername to be the same as host\n  if (result.servername == null && result.host && !net.isIP(result.host)) {\n    result.servername = result.host;\n  }\n  return result;\n}\nasync function makeSocket(options) {\n  const useTLS = options.tls ?? false;\n  const noDelay = options.noDelay ?? true;\n  const connectTimeoutMS = options.connectTimeoutMS ?? 30000;\n  const rejectUnauthorized = options.rejectUnauthorized ?? true;\n  const existingSocket = options.existingSocket;\n  let socket;\n  if (options.proxyHost != null) {\n    // Currently, only Socks5 is supported.\n    return makeSocks5Connection({\n      ...options,\n      connectTimeoutMS // Should always be present for Socks5\n    });\n  }\n  if (useTLS) {\n    const tlsSocket = tls.connect(parseSslOptions(options));\n    if (typeof tlsSocket.disableRenegotiation === 'function') {\n      tlsSocket.disableRenegotiation();\n    }\n    socket = tlsSocket;\n  } else if (existingSocket) {\n    // In the TLS case, parseSslOptions() sets options.socket to existingSocket,\n    // so we only need to handle the non-TLS case here (where existingSocket\n    // gives us all we need out of the box).\n    socket = existingSocket;\n  } else {\n    socket = net.createConnection(parseConnectOptions(options));\n  }\n  socket.setKeepAlive(true, 300000);\n  socket.setTimeout(connectTimeoutMS);\n  socket.setNoDelay(noDelay);\n  let cancellationHandler = null;\n  const {\n    promise: connectedSocket,\n    resolve,\n    reject\n  } = (0, utils_1.promiseWithResolvers)();\n  if (existingSocket) {\n    resolve(socket);\n  } else {\n    const connectEvent = useTLS ? 'secureConnect' : 'connect';\n    socket.once(connectEvent, () => resolve(socket)).once('error', error => reject(connectionFailureError('error', error))).once('timeout', () => reject(connectionFailureError('timeout'))).once('close', () => reject(connectionFailureError('close')));\n    if (options.cancellationToken != null) {\n      cancellationHandler = () => reject(connectionFailureError('cancel'));\n      options.cancellationToken.once('cancel', cancellationHandler);\n    }\n  }\n  try {\n    socket = await connectedSocket;\n    return socket;\n  } catch (error) {\n    socket.destroy();\n    if ('authorizationError' in socket && socket.authorizationError != null && rejectUnauthorized) {\n      // TODO(NODE-5192): wrap this with a MongoError subclass\n      throw socket.authorizationError;\n    }\n    throw error;\n  } finally {\n    socket.setTimeout(0);\n    socket.removeAllListeners();\n    if (cancellationHandler != null) {\n      options.cancellationToken?.removeListener('cancel', cancellationHandler);\n    }\n  }\n}\nexports.makeSocket = makeSocket;\nlet socks = null;\nfunction loadSocks() {\n  if (socks == null) {\n    const socksImport = (0, deps_1.getSocks)();\n    if ('kModuleError' in socksImport) {\n      throw socksImport.kModuleError;\n    }\n    socks = socksImport;\n  }\n  return socks;\n}\nasync function makeSocks5Connection(options) {\n  const hostAddress = utils_1.HostAddress.fromHostPort(options.proxyHost ?? '',\n  // proxyHost is guaranteed to set here\n  options.proxyPort ?? 1080);\n  // First, connect to the proxy server itself:\n  const rawSocket = await makeSocket({\n    ...options,\n    hostAddress,\n    tls: false,\n    proxyHost: undefined\n  });\n  const destination = parseConnectOptions(options);\n  if (typeof destination.host !== 'string' || typeof destination.port !== 'number') {\n    throw new error_1.MongoInvalidArgumentError('Can only make Socks5 connections to TCP hosts');\n  }\n  socks ??= loadSocks();\n  try {\n    // Then, establish the Socks5 proxy connection:\n    const {\n      socket\n    } = await socks.SocksClient.createConnection({\n      existing_socket: rawSocket,\n      timeout: options.connectTimeoutMS,\n      command: 'connect',\n      destination: {\n        host: destination.host,\n        port: destination.port\n      },\n      proxy: {\n        // host and port are ignored because we pass existing_socket\n        host: 'iLoveJavaScript',\n        port: 0,\n        type: 5,\n        userId: options.proxyUsername || undefined,\n        password: options.proxyPassword || undefined\n      }\n    });\n    // Finally, now treat the resulting duplex stream as the\n    // socket over which we send and receive wire protocol messages:\n    return await makeSocket({\n      ...options,\n      existingSocket: socket,\n      proxyHost: undefined\n    });\n  } catch (error) {\n    throw connectionFailureError('error', error);\n  }\n}\nfunction connectionFailureError(type, cause) {\n  switch (type) {\n    case 'error':\n      return new error_1.MongoNetworkError(error_1.MongoError.buildErrorMessage(cause), {\n        cause\n      });\n    case 'timeout':\n      return new error_1.MongoNetworkTimeoutError('connection timed out');\n    case 'close':\n      return new error_1.MongoNetworkError('connection closed');\n    case 'cancel':\n      return new error_1.MongoNetworkError('connection establishment was cancelled');\n    default:\n      return new error_1.MongoNetworkError('unknown network error');\n  }\n}","map":{"version":3,"names":["net","require","tls","constants_1","deps_1","error_1","utils_1","auth_provider_1","providers_1","connection_1","constants_2","connect","options","connection","socket","makeSocket","makeConnection","performInitialHandshake","error","destroy","force","exports","ConnectionType","connectionType","Connection","autoEncrypter","CryptoConnection","checkSupportedServer","hello","maxWireVersion","Number","minWireVersion","serverVersionHighEnough","isNaN","MIN_SUPPORTED_WIRE_VERSION","serverVersionLowEnough","MAX_SUPPORTED_WIRE_VERSION","message","hostAddress","JSON","stringify","MAX_SUPPORTED_SERVER_VERSION","MongoCompatibilityError","MIN_SUPPORTED_SERVER_VERSION","conn","credentials","mechanism","AuthMechanism","MONGODB_DEFAULT","authProviders","getOrCreateProvider","MongoInvalidArgumentError","authContext","AuthContext","handshakeDoc","prepareHandshakeDocument","handshakeOptions","connectTimeoutMS","socketTimeoutMS","start","Date","getTime","response","command","ns","isWritablePrimary","LEGACY_HELLO_COMMAND","helloOk","supportedServerErr","loadBalanced","serviceId","lastHelloMS","arbiterOnly","resolvedCredentials","resolveAuthMechanism","provider","auth","MongoError","addErrorLabel","MongoErrorLabel","HandshakeError","needsRetryableWriteLabel","RetryableWriteError","established","compressors","serverApi","version","client","metadata","compression","username","saslSupportedMechs","source","MONGODB_SCRAM_SHA256","prepare","LEGAL_TLS_SOCKET_OPTIONS","LEGAL_TCP_SOCKET_OPTIONS","parseConnectOptions","result","name","socketPath","path","host","port","MongoRuntimeError","parseSslOptions","existingSocket","servername","isIP","useTLS","noDelay","rejectUnauthorized","proxyHost","makeSocks5Connection","tlsSocket","disableRenegotiation","createConnection","setKeepAlive","setTimeout","setNoDelay","cancellationHandler","promise","connectedSocket","resolve","reject","promiseWithResolvers","connectEvent","once","connectionFailureError","cancellationToken","authorizationError","removeAllListeners","removeListener","socks","loadSocks","socksImport","getSocks","kModuleError","HostAddress","fromHostPort","proxyPort","rawSocket","undefined","destination","SocksClient","existing_socket","timeout","proxy","type","userId","proxyUsername","password","proxyPassword","cause","MongoNetworkError","buildErrorMessage","MongoNetworkTimeoutError"],"sources":["C:\\Users\\zkhan\\OneDrive\\Desktop\\my-app1\\node_modules\\mongodb\\src\\cmap\\connect.ts"],"sourcesContent":["import type { Socket, SocketConnectOpts } from 'net';\nimport * as net from 'net';\nimport type { ConnectionOptions as TLSConnectionOpts, TLSSocket } from 'tls';\nimport * as tls from 'tls';\n\nimport type { Document } from '../bson';\nimport { LEGACY_HELLO_COMMAND } from '../constants';\nimport { getSocks, type SocksLib } from '../deps';\nimport {\n  MongoCompatibilityError,\n  MongoError,\n  MongoErrorLabel,\n  MongoInvalidArgumentError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoRuntimeError,\n  needsRetryableWriteLabel\n} from '../error';\nimport { HostAddress, ns, promiseWithResolvers } from '../utils';\nimport { AuthContext } from './auth/auth_provider';\nimport { AuthMechanism } from './auth/providers';\nimport {\n  type CommandOptions,\n  Connection,\n  type ConnectionOptions,\n  CryptoConnection\n} from './connection';\nimport type { ClientMetadata } from './handshake/client_metadata';\nimport {\n  MAX_SUPPORTED_SERVER_VERSION,\n  MAX_SUPPORTED_WIRE_VERSION,\n  MIN_SUPPORTED_SERVER_VERSION,\n  MIN_SUPPORTED_WIRE_VERSION\n} from './wire_protocol/constants';\n\n/** @public */\nexport type Stream = Socket | TLSSocket;\n\nexport async function connect(options: ConnectionOptions): Promise<Connection> {\n  let connection: Connection | null = null;\n  try {\n    const socket = await makeSocket(options);\n    connection = makeConnection(options, socket);\n    await performInitialHandshake(connection, options);\n    return connection;\n  } catch (error) {\n    connection?.destroy({ force: false });\n    throw error;\n  }\n}\n\nexport function makeConnection(options: ConnectionOptions, socket: Stream): Connection {\n  let ConnectionType = options.connectionType ?? Connection;\n  if (options.autoEncrypter) {\n    ConnectionType = CryptoConnection;\n  }\n\n  return new ConnectionType(socket, options);\n}\n\nfunction checkSupportedServer(hello: Document, options: ConnectionOptions) {\n  const maxWireVersion = Number(hello.maxWireVersion);\n  const minWireVersion = Number(hello.minWireVersion);\n  const serverVersionHighEnough =\n    !Number.isNaN(maxWireVersion) && maxWireVersion >= MIN_SUPPORTED_WIRE_VERSION;\n  const serverVersionLowEnough =\n    !Number.isNaN(minWireVersion) && minWireVersion <= MAX_SUPPORTED_WIRE_VERSION;\n\n  if (serverVersionHighEnough) {\n    if (serverVersionLowEnough) {\n      return null;\n    }\n\n    const message = `Server at ${options.hostAddress} reports minimum wire version ${JSON.stringify(\n      hello.minWireVersion\n    )}, but this version of the Node.js Driver requires at most ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;\n    return new MongoCompatibilityError(message);\n  }\n\n  const message = `Server at ${options.hostAddress} reports maximum wire version ${\n    JSON.stringify(hello.maxWireVersion) ?? 0\n  }, but this version of the Node.js Driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION})`;\n  return new MongoCompatibilityError(message);\n}\n\nexport async function performInitialHandshake(\n  conn: Connection,\n  options: ConnectionOptions\n): Promise<void> {\n  const credentials = options.credentials;\n\n  if (credentials) {\n    if (\n      !(credentials.mechanism === AuthMechanism.MONGODB_DEFAULT) &&\n      !options.authProviders.getOrCreateProvider(credentials.mechanism)\n    ) {\n      throw new MongoInvalidArgumentError(`AuthMechanism '${credentials.mechanism}' not supported`);\n    }\n  }\n\n  const authContext = new AuthContext(conn, credentials, options);\n  conn.authContext = authContext;\n\n  const handshakeDoc = await prepareHandshakeDocument(authContext);\n\n  // @ts-expect-error: TODO(NODE-5141): The options need to be filtered properly, Connection options differ from Command options\n  const handshakeOptions: CommandOptions = { ...options };\n  if (typeof options.connectTimeoutMS === 'number') {\n    // The handshake technically is a monitoring check, so its socket timeout should be connectTimeoutMS\n    handshakeOptions.socketTimeoutMS = options.connectTimeoutMS;\n  }\n\n  const start = new Date().getTime();\n  const response = await conn.command(ns('admin.$cmd'), handshakeDoc, handshakeOptions);\n\n  if (!('isWritablePrimary' in response)) {\n    // Provide hello-style response document.\n    response.isWritablePrimary = response[LEGACY_HELLO_COMMAND];\n  }\n\n  if (response.helloOk) {\n    conn.helloOk = true;\n  }\n\n  const supportedServerErr = checkSupportedServer(response, options);\n  if (supportedServerErr) {\n    throw supportedServerErr;\n  }\n\n  if (options.loadBalanced) {\n    if (!response.serviceId) {\n      throw new MongoCompatibilityError(\n        'Driver attempted to initialize in load balancing mode, ' +\n          'but the server does not support this mode.'\n      );\n    }\n  }\n\n  // NOTE: This is metadata attached to the connection while porting away from\n  //       handshake being done in the `Server` class. Likely, it should be\n  //       relocated, or at very least restructured.\n  conn.hello = response;\n  conn.lastHelloMS = new Date().getTime() - start;\n\n  if (!response.arbiterOnly && credentials) {\n    // store the response on auth context\n    authContext.response = response;\n\n    const resolvedCredentials = credentials.resolveAuthMechanism(response);\n    const provider = options.authProviders.getOrCreateProvider(resolvedCredentials.mechanism);\n    if (!provider) {\n      throw new MongoInvalidArgumentError(\n        `No AuthProvider for ${resolvedCredentials.mechanism} defined.`\n      );\n    }\n\n    try {\n      await provider.auth(authContext);\n    } catch (error) {\n      if (error instanceof MongoError) {\n        error.addErrorLabel(MongoErrorLabel.HandshakeError);\n        if (needsRetryableWriteLabel(error, response.maxWireVersion)) {\n          error.addErrorLabel(MongoErrorLabel.RetryableWriteError);\n        }\n      }\n      throw error;\n    }\n  }\n\n  // Connection establishment is socket creation (tcp handshake, tls handshake, MongoDB handshake (saslStart, saslContinue))\n  // Once connection is established, command logging can log events (if enabled)\n  conn.established = true;\n}\n\n/**\n * HandshakeDocument used during authentication.\n * @internal\n */\nexport interface HandshakeDocument extends Document {\n  /**\n   * @deprecated Use hello instead\n   */\n  ismaster?: boolean;\n  hello?: boolean;\n  helloOk?: boolean;\n  client: ClientMetadata;\n  compression: string[];\n  saslSupportedMechs?: string;\n  loadBalanced?: boolean;\n}\n\n/**\n * @internal\n *\n * This function is only exposed for testing purposes.\n */\nexport async function prepareHandshakeDocument(\n  authContext: AuthContext\n): Promise<HandshakeDocument> {\n  const options = authContext.options;\n  const compressors = options.compressors ? options.compressors : [];\n  const { serverApi } = authContext.connection;\n\n  const handshakeDoc: HandshakeDocument = {\n    [serverApi?.version || options.loadBalanced === true ? 'hello' : LEGACY_HELLO_COMMAND]: 1,\n    helloOk: true,\n    client: options.metadata,\n    compression: compressors\n  };\n\n  if (options.loadBalanced === true) {\n    handshakeDoc.loadBalanced = true;\n  }\n\n  const credentials = authContext.credentials;\n  if (credentials) {\n    if (credentials.mechanism === AuthMechanism.MONGODB_DEFAULT && credentials.username) {\n      handshakeDoc.saslSupportedMechs = `${credentials.source}.${credentials.username}`;\n\n      const provider = authContext.options.authProviders.getOrCreateProvider(\n        AuthMechanism.MONGODB_SCRAM_SHA256\n      );\n      if (!provider) {\n        // This auth mechanism is always present.\n        throw new MongoInvalidArgumentError(\n          `No AuthProvider for ${AuthMechanism.MONGODB_SCRAM_SHA256} defined.`\n        );\n      }\n      return provider.prepare(handshakeDoc, authContext);\n    }\n    const provider = authContext.options.authProviders.getOrCreateProvider(credentials.mechanism);\n    if (!provider) {\n      throw new MongoInvalidArgumentError(`No AuthProvider for ${credentials.mechanism} defined.`);\n    }\n    return provider.prepare(handshakeDoc, authContext);\n  }\n  return handshakeDoc;\n}\n\n/** @public */\nexport const LEGAL_TLS_SOCKET_OPTIONS = [\n  'ALPNProtocols',\n  'ca',\n  'cert',\n  'checkServerIdentity',\n  'ciphers',\n  'crl',\n  'ecdhCurve',\n  'key',\n  'minDHSize',\n  'passphrase',\n  'pfx',\n  'rejectUnauthorized',\n  'secureContext',\n  'secureProtocol',\n  'servername',\n  'session'\n] as const;\n\n/** @public */\nexport const LEGAL_TCP_SOCKET_OPTIONS = [\n  'family',\n  'hints',\n  'localAddress',\n  'localPort',\n  'lookup'\n] as const;\n\nfunction parseConnectOptions(options: ConnectionOptions): SocketConnectOpts {\n  const hostAddress = options.hostAddress;\n  if (!hostAddress) throw new MongoInvalidArgumentError('Option \"hostAddress\" is required');\n\n  const result: Partial<net.TcpNetConnectOpts & net.IpcNetConnectOpts> = {};\n  for (const name of LEGAL_TCP_SOCKET_OPTIONS) {\n    if (options[name] != null) {\n      (result as Document)[name] = options[name];\n    }\n  }\n\n  if (typeof hostAddress.socketPath === 'string') {\n    result.path = hostAddress.socketPath;\n    return result as net.IpcNetConnectOpts;\n  } else if (typeof hostAddress.host === 'string') {\n    result.host = hostAddress.host;\n    result.port = hostAddress.port;\n    return result as net.TcpNetConnectOpts;\n  } else {\n    // This should never happen since we set up HostAddresses\n    // But if we don't throw here the socket could hang until timeout\n    // TODO(NODE-3483)\n    throw new MongoRuntimeError(`Unexpected HostAddress ${JSON.stringify(hostAddress)}`);\n  }\n}\n\ntype MakeConnectionOptions = ConnectionOptions & { existingSocket?: Stream };\n\nfunction parseSslOptions(options: MakeConnectionOptions): TLSConnectionOpts {\n  const result: TLSConnectionOpts = parseConnectOptions(options);\n  // Merge in valid SSL options\n  for (const name of LEGAL_TLS_SOCKET_OPTIONS) {\n    if (options[name] != null) {\n      (result as Document)[name] = options[name];\n    }\n  }\n\n  if (options.existingSocket) {\n    result.socket = options.existingSocket;\n  }\n\n  // Set default sni servername to be the same as host\n  if (result.servername == null && result.host && !net.isIP(result.host)) {\n    result.servername = result.host;\n  }\n\n  return result;\n}\n\nexport async function makeSocket(options: MakeConnectionOptions): Promise<Stream> {\n  const useTLS = options.tls ?? false;\n  const noDelay = options.noDelay ?? true;\n  const connectTimeoutMS = options.connectTimeoutMS ?? 30000;\n  const rejectUnauthorized = options.rejectUnauthorized ?? true;\n  const existingSocket = options.existingSocket;\n\n  let socket: Stream;\n\n  if (options.proxyHost != null) {\n    // Currently, only Socks5 is supported.\n    return makeSocks5Connection({\n      ...options,\n      connectTimeoutMS // Should always be present for Socks5\n    });\n  }\n\n  if (useTLS) {\n    const tlsSocket = tls.connect(parseSslOptions(options));\n    if (typeof tlsSocket.disableRenegotiation === 'function') {\n      tlsSocket.disableRenegotiation();\n    }\n    socket = tlsSocket;\n  } else if (existingSocket) {\n    // In the TLS case, parseSslOptions() sets options.socket to existingSocket,\n    // so we only need to handle the non-TLS case here (where existingSocket\n    // gives us all we need out of the box).\n    socket = existingSocket;\n  } else {\n    socket = net.createConnection(parseConnectOptions(options));\n  }\n\n  socket.setKeepAlive(true, 300000);\n  socket.setTimeout(connectTimeoutMS);\n  socket.setNoDelay(noDelay);\n\n  let cancellationHandler: ((err: Error) => void) | null = null;\n\n  const { promise: connectedSocket, resolve, reject } = promiseWithResolvers<Stream>();\n  if (existingSocket) {\n    resolve(socket);\n  } else {\n    const connectEvent = useTLS ? 'secureConnect' : 'connect';\n    socket\n      .once(connectEvent, () => resolve(socket))\n      .once('error', error => reject(connectionFailureError('error', error)))\n      .once('timeout', () => reject(connectionFailureError('timeout')))\n      .once('close', () => reject(connectionFailureError('close')));\n\n    if (options.cancellationToken != null) {\n      cancellationHandler = () => reject(connectionFailureError('cancel'));\n      options.cancellationToken.once('cancel', cancellationHandler);\n    }\n  }\n\n  try {\n    socket = await connectedSocket;\n    return socket;\n  } catch (error) {\n    socket.destroy();\n    if ('authorizationError' in socket && socket.authorizationError != null && rejectUnauthorized) {\n      // TODO(NODE-5192): wrap this with a MongoError subclass\n      throw socket.authorizationError;\n    }\n    throw error;\n  } finally {\n    socket.setTimeout(0);\n    socket.removeAllListeners();\n    if (cancellationHandler != null) {\n      options.cancellationToken?.removeListener('cancel', cancellationHandler);\n    }\n  }\n}\n\nlet socks: SocksLib | null = null;\nfunction loadSocks() {\n  if (socks == null) {\n    const socksImport = getSocks();\n    if ('kModuleError' in socksImport) {\n      throw socksImport.kModuleError;\n    }\n    socks = socksImport;\n  }\n  return socks;\n}\n\nasync function makeSocks5Connection(options: MakeConnectionOptions): Promise<Stream> {\n  const hostAddress = HostAddress.fromHostPort(\n    options.proxyHost ?? '', // proxyHost is guaranteed to set here\n    options.proxyPort ?? 1080\n  );\n\n  // First, connect to the proxy server itself:\n  const rawSocket = await makeSocket({\n    ...options,\n    hostAddress,\n    tls: false,\n    proxyHost: undefined\n  });\n\n  const destination = parseConnectOptions(options) as net.TcpNetConnectOpts;\n  if (typeof destination.host !== 'string' || typeof destination.port !== 'number') {\n    throw new MongoInvalidArgumentError('Can only make Socks5 connections to TCP hosts');\n  }\n\n  socks ??= loadSocks();\n\n  try {\n    // Then, establish the Socks5 proxy connection:\n    const { socket } = await socks.SocksClient.createConnection({\n      existing_socket: rawSocket,\n      timeout: options.connectTimeoutMS,\n      command: 'connect',\n      destination: {\n        host: destination.host,\n        port: destination.port\n      },\n      proxy: {\n        // host and port are ignored because we pass existing_socket\n        host: 'iLoveJavaScript',\n        port: 0,\n        type: 5,\n        userId: options.proxyUsername || undefined,\n        password: options.proxyPassword || undefined\n      }\n    });\n\n    // Finally, now treat the resulting duplex stream as the\n    // socket over which we send and receive wire protocol messages:\n    return await makeSocket({\n      ...options,\n      existingSocket: socket,\n      proxyHost: undefined\n    });\n  } catch (error) {\n    throw connectionFailureError('error', error);\n  }\n}\n\nfunction connectionFailureError(type: 'error', cause: Error): MongoNetworkError;\nfunction connectionFailureError(type: 'close' | 'timeout' | 'cancel'): MongoNetworkError;\nfunction connectionFailureError(\n  type: 'error' | 'close' | 'timeout' | 'cancel',\n  cause?: Error\n): MongoNetworkError {\n  switch (type) {\n    case 'error':\n      return new MongoNetworkError(MongoError.buildErrorMessage(cause), { cause });\n    case 'timeout':\n      return new MongoNetworkTimeoutError('connection timed out');\n    case 'close':\n      return new MongoNetworkError('connection closed');\n    case 'cancel':\n      return new MongoNetworkError('connection establishment was cancelled');\n    default:\n      return new MongoNetworkError('unknown network error');\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}