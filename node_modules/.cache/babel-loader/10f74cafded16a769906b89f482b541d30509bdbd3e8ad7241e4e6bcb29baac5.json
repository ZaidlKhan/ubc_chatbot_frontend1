{"ast":null,"code":"const {\n  MongoClient,\n  ServerApiVersion\n} = require('mongodb');\nconst uri = \"mongodb+srv://zkhan1605:dNLW1dLC3u0rmy6s@ubcsciencecourse.ruqxbn2.mongodb.net/?retryWrites=true&w=majority&appName=ubcsciencecourse\";\nconst client = new MongoClient(uri, {\n  serverApi: {\n    version: ServerApiVersion.v1,\n    strict: true,\n    deprecationErrors: true\n  }\n});\nasync function run() {\n  try {\n    await client.connect();\n    await client.db(\"admin\").command({\n      ping: 1\n    });\n    console.log(\"Pinged your deployment. You successfully connected to MongoDB!\");\n  } catch (error) {\n    console.log(error);\n  }\n  const db_name = \"ubcsciencecourse\";\n  const collectionName = \"messages\";\n  const database = client.db(db_name);\n  const collection = database.collection(collectionName);\n}\nasync function checkUserIdExists(userId) {\n  try {\n    await client.connect();\n    const database = client.db(\"ubcsciencecourse\");\n    const collection = database.collection(\"messages\");\n    const userDocument = await collection.findOne({\n      user_id: userId\n    });\n    if (userDocument) {\n      console.log('User ID found in the database:', userDocument);\n      return true;\n    } else {\n      console.log('User ID not found in the database.');\n      return false;\n    }\n  } catch (error) {\n    console.error('Error connecting to the database or querying for user_id:', error);\n    return false;\n  } finally {\n    await client.close();\n  }\n}\nmodule.exports = {\n  checkUserIdExists\n};\nrun().catch(console.dir);","map":{"version":3,"names":["MongoClient","ServerApiVersion","require","uri","client","serverApi","version","v1","strict","deprecationErrors","run","connect","db","command","ping","console","log","error","db_name","collectionName","database","collection","checkUserIdExists","userId","userDocument","findOne","user_id","close","module","exports","catch","dir"],"sources":["C:/Users/zkhan/OneDrive/Desktop/my-app1/src/server.js"],"sourcesContent":["const { MongoClient, ServerApiVersion } = require('mongodb');\r\nconst uri = \"mongodb+srv://zkhan1605:dNLW1dLC3u0rmy6s@ubcsciencecourse.ruqxbn2.mongodb.net/?retryWrites=true&w=majority&appName=ubcsciencecourse\";\r\n\r\nconst client = new MongoClient(uri, {\r\n  serverApi: {\r\n    version: ServerApiVersion.v1,\r\n    strict: true,\r\n    deprecationErrors: true,\r\n  }\r\n});\r\n\r\nasync function run() {\r\n  try {\r\n    await client.connect();\r\n    await client.db(\"admin\").command({ ping: 1 });\r\n    console.log(\"Pinged your deployment. You successfully connected to MongoDB!\");\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n\r\n    const db_name = \"ubcsciencecourse\";\r\n    const collectionName = \"messages\";\r\n\r\n    const database = client.db(db_name);\r\n    const collection = database.collection(collectionName);\r\n}\r\n\r\n\r\nasync function checkUserIdExists(userId) {\r\n    try {\r\n      await client.connect();\r\n      const database = client.db(\"ubcsciencecourse\");\r\n      const collection = database.collection(\"messages\");\r\n  \r\n      const userDocument = await collection.findOne({ user_id: userId });\r\n      \r\n      if (userDocument) {\r\n        console.log('User ID found in the database:', userDocument);\r\n        return true;\r\n      } else {\r\n        console.log('User ID not found in the database.');\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error connecting to the database or querying for user_id:', error);\r\n      return false;\r\n    } finally {\r\n      await client.close();\r\n    }\r\n  }\r\n\r\nmodule.exports = { checkUserIdExists };\r\nrun().catch(console.dir);\r\n\r\n\r\n"],"mappings":"AAAA,MAAM;EAAEA,WAAW;EAAEC;AAAiB,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC5D,MAAMC,GAAG,GAAG,qIAAqI;AAEjJ,MAAMC,MAAM,GAAG,IAAIJ,WAAW,CAACG,GAAG,EAAE;EAClCE,SAAS,EAAE;IACTC,OAAO,EAAEL,gBAAgB,CAACM,EAAE;IAC5BC,MAAM,EAAE,IAAI;IACZC,iBAAiB,EAAE;EACrB;AACF,CAAC,CAAC;AAEF,eAAeC,GAAGA,CAAA,EAAG;EACnB,IAAI;IACF,MAAMN,MAAM,CAACO,OAAO,CAAC,CAAC;IACtB,MAAMP,MAAM,CAACQ,EAAE,CAAC,OAAO,CAAC,CAACC,OAAO,CAAC;MAAEC,IAAI,EAAE;IAAE,CAAC,CAAC;IAC7CC,OAAO,CAACC,GAAG,CAAC,gEAAgE,CAAC;EAC/E,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;EACpB;EAEE,MAAMC,OAAO,GAAG,kBAAkB;EAClC,MAAMC,cAAc,GAAG,UAAU;EAEjC,MAAMC,QAAQ,GAAGhB,MAAM,CAACQ,EAAE,CAACM,OAAO,CAAC;EACnC,MAAMG,UAAU,GAAGD,QAAQ,CAACC,UAAU,CAACF,cAAc,CAAC;AAC1D;AAGA,eAAeG,iBAAiBA,CAACC,MAAM,EAAE;EACrC,IAAI;IACF,MAAMnB,MAAM,CAACO,OAAO,CAAC,CAAC;IACtB,MAAMS,QAAQ,GAAGhB,MAAM,CAACQ,EAAE,CAAC,kBAAkB,CAAC;IAC9C,MAAMS,UAAU,GAAGD,QAAQ,CAACC,UAAU,CAAC,UAAU,CAAC;IAElD,MAAMG,YAAY,GAAG,MAAMH,UAAU,CAACI,OAAO,CAAC;MAAEC,OAAO,EAAEH;IAAO,CAAC,CAAC;IAElE,IAAIC,YAAY,EAAE;MAChBT,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEQ,YAAY,CAAC;MAC3D,OAAO,IAAI;IACb,CAAC,MAAM;MACLT,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACjD,OAAO,KAAK;IACd;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,2DAA2D,EAAEA,KAAK,CAAC;IACjF,OAAO,KAAK;EACd,CAAC,SAAS;IACR,MAAMb,MAAM,CAACuB,KAAK,CAAC,CAAC;EACtB;AACF;AAEFC,MAAM,CAACC,OAAO,GAAG;EAAEP;AAAkB,CAAC;AACtCZ,GAAG,CAAC,CAAC,CAACoB,KAAK,CAACf,OAAO,CAACgB,GAAG,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}